" I really really think line numbers are ugly. They are in my status line
" anyway!
set nonumber
set wrap
set hidden
set clipboard=unnamed

" I hit wq all the time when I just want to save. Disable that.
cmap wq w
" Hitting uppercase w is also a classic.
cmap W w
" I also hit f1 when scrambling for esc, so just remap that while we are at
" it.
map! <f1> <esc>
" I never type jj, so make that esc now that we are stealing keys anyway.
imap jj <Esc>

" Enable spellchecking conditionally
map <Leader>se :setlocal spell spelllang=en_us<CR>
map <Leader>sd :setlocal spell spelllang=da_dk<CR>
map <Leader>sn :setlocal nospell<CR>

" Create directional shortcuts for moving between splits
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-l> <C-W>l
nmap <C-h> <C-W>h

map <Leader>f :Ack<CR>
map <Leader>z :BufOnly<CR>

" Stolen from:
" http://got-ravings.blogspot.com/2008/08/vim-pr0n-making-statuslines-that-own.html
set statusline=%t\       "tail of the filename
set statusline+=%m\      "modified flag
set statusline+=%y\      "filetype
set statusline+=b%-3.3n\  "buffer number
set statusline+=%r      "read only flag
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" Map the buffer switcher from the Ctrlp plugin.
map <leader>b :CtrlPBuffer<cr>
" Map the recent files.
map <leader>r :CtrlPMRUFiles<cr>
" Map find-tag-in-buffer.
map <leader>t :CtrlPBufTag<cr>
" Map find-tag-in-all-buffers.
map <leader>ta :CtrlPBufTagAll<cr>
" Enable these extensions. Cycle through them with ctrl-f and ctrl-b when the
" CtrlP window is open.
let g:ctrlp_extensions = ['tag', 'buffertag']

" Show in tree.
map <leader>N :NERDTreeFind<cr>

" Close buffer but not window.
map <leader>d :Kwbd<cr>
" Go to next buffer
map <leader>. :bn<cr>
" Go to previous buffer
map <leader>m :bp<cr>

" Remove trailing whitespace.
map <leader>s :%s/\s\+$//e<cr>

" CTAGS - use an explicit path or the Mac one will be used.
map <F8> :!/usr/local/bin/ctags -R --tag-relative=yes --langmap=php:.profile.engine.inc.module.theme.php --php-kinds=+f --languages=php --recurse<CR>

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=0
let g:syntastic_phpcs_conf='--standard=Drupal --extensions=php,module,inc,install,test,profile,theme'
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': ['php'],
                           \ 'passive_filetypes': [] }
" Check php files for errors
set makeprg=php\ -l\ %
set errorformat=%m\ in\ %f\ on\ line\ %l

autocmd BufRead,BufNewFile *.css,*.scss,*.less setlocal foldmethod=marker foldmarker={,}

function! PHPsynCHK()
  let winnum =winnr() " get current window number
  silent make -l %
  cw " open the error window if it contains error
  " return to the window with cursor set on the line of the first error (if any)
  execute winnum . "wincmd w"
endfunction
" Map <CTRL>-i to check the file for syntax
:noremap <leader>i :call PHPsynCHK()<CR>

" Edit my todo.txt fast
map <leader>td :e ~/Dropbox/todo/todo.txt<cr>

" Put my vimwiki in my Dropbox
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki'}]

function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri != ""
    silent exec "!open '".s:uri."'"
  else
    echo "No URI found in line."
  endif
endfunction
map <leader>` :call HandleURL()<cr>
